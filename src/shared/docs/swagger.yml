openapi: 3.0.0
info:
  version: '1.1.0'
  title: Software Finance API
  termsOfService: 'http://swagger.io/terms/'
  license:
    name: ISC
  contact:
    name: Jesus Oviedo
    email: oviedossj3@gmail.com
servers:
  - url: https://api.example.com/v1
    description: Default server
paths:
  /api/register:
    post:
      tags:
        - Authentication
      summary: Register a new user
      operationId: registerUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/login:
    post:
      tags:
        - Authentication
      summary: Login with email and password
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/loginOauth:
    get:
      tags:
        - Authentication
      summary: Initiate Google OAuth login
      operationId: loginWithGoogle
      responses:
        '302':
          description: Redirect to Google OAuth
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/gtoken:
    get:
      tags:
        - Authentication
      summary: Handle Google OAuth callback
      operationId: handleGoogleCallback
      parameters:
        - name: code
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/refresh:
    get:
      tags:
        - Authentication
      summary: Refresh access token
      operationId: refreshToken
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                type: string
                example: 'Token de acceso actualizado'
        '500':
          $ref: '#/components/responses/InternalServerError'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    Success:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/StandardResponse'
    Unauthorized:
      description: Access token is missing or is invalid
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    InternalServerError:
      description: Internal server error
  schemas:
    StandardResponse:
      type: object
      properties:
        message:
          type: string
          example: Successful operation
        status:
          type: number
          example: 200
    Error:
      type: object
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ErrorItem'
        status:
          type: number
          example: 400
    ErrorItem:
      type: object
      properties:
        key:
          type: string
          example: general.UNAUTHORIZED.not_found_user
        message:
          type: string
          example: Invalid user or password not found
    RegisterRequest:
      type: object
      required:
        - email
        - password
        - user_name
      properties:
        email:
          type: string
          format: email
          example: user@example.com
        password:
          type: string
          format: password
        user_name:
          type: string
          example: John Doe
        google_id:
          type: string
          example: 1234567890
        profile_picture:
          type: string
          example: http://example.com/avatar.jpg
        birthday:
          type: string
          format: date
          example: 1990-01-01
        phone:
          type: string
          example: 123-456-7890
        address:
          type: string
          example: 123 Main St, Anytown, USA
        auth_provider:
          type: string
          enum: [local, google]
          example: local
        reset_token:
          type: string
          example: abcdef123456
        reset_token_expiration:
          type: string
          format: date-time
          example: 2024-12-31T23:59:59Z
        email_verified:
          type: boolean
          example: false
        email_verification_token:
          type: string
          example: abcdef123456

    
    # RegisterRequest:
    #   type: object
    #   required:
    #     - email
    #     - password
    #     - user_name
    #   properties:
    #     email:
    #       type: string
    #       format: email
    #       example: user@example.com
    #     password:
    #       type: string
    #       format: password
    #     user_name:
    #       type: string
    #       example: John Doe
    RegisterResponse:
      type: object
      properties:
        id:
          type: string
          example: 1
    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: user@example.com
        password:
          type: string
          format: password
    TokenResponse:
      type: object
      properties:
        accessToken:
          type: string
        refreshToken:
          type: string
    UserResponse:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
          format: email
